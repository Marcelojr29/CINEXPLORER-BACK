generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cinema {
  id String @id @default(uuid())
  name String
  address String
  city String
  state String
  latitude Float?
  longitude Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sessions Session[]

  @@map("cinemas")
  Promotion Promotion[]
}

model Movie {
  id String @id @default(uuid())
  title String
  genre String
  duration Int
  rating String
  description String?
  imageUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sessions Session[]

  @@map("movies")
  Promotion Promotion[]
}

model Session {
  id String @id @default(uuid())
  cinemaId String
  movieId String
  dateTime DateTime
  roomType String
  price Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cinema Cinema @relation(fields: [cinemaId], references: [id])
  movie Movie @relation(fields: [movieId], references: [id])
  purchases Purchase[]

  @@map("sessions")
}

model Purchase {
  id String @id @default(uuid())
  sessionId String
  userEmail String
  userCpf String?
  quantity Int
  ticketTypeId String
  ticketType TicketType @relation(fields: [ticketTypeId], references: [id])
  totalPrice Float
  createdAt DateTime @default(now())
  sessions Session @relation(fields: [sessionId], references: [id])

  @@map("purchases")
}

model Admin {
  id String @id @default(uuid())
  name String
  email String @unique
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model TicketType {
  id String @id @default(uuid())
  name String
  description String
  discountPercentage Float
  requiresProof Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ticket_types")
  purchases Purchase[]
}

model Promotion {
  id String @id @default(uuid())
  name String
  description String
  discountPercentage Float
  startDate DateTime
  endDate DateTime
  cinemaId String?
  movieId String?
  cinema Cinema? @relation(fields: [cinemaId], references: [id])
  movie Movie? @relation(fields: [movieId], references: [id])
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("promotions")
}
